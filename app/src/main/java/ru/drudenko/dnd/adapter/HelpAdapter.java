package ru.drudenko.dnd.adapter;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Build;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.TextView;

import androidx.annotation.RequiresApi;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import ru.drudenko.dnd.R;
import ru.drudenko.dnd.model.CustomItem;

public class HelpAdapter extends BaseExpandableListAdapter implements Filterable {
    private LinkedHashMap<String, List<CustomItem>> originalData = new LinkedHashMap<>();
    private LinkedHashMap<String, List<CustomItem>> filteredData = new LinkedHashMap<>();

    private Context context;
    private LayoutInflater mInflater;
    private ItemFilter mFilter = new ItemFilter();

    public HelpAdapter(Context context) {
        this.context = context;

        List<CustomItem> m1 = new ArrayList<>();
        m1.add(new CustomItem("Передвижение", "Вы можете в свой ход переместиться на расстояние, не превышающее вашу скорость, используя приведённые здесь правила. Ваше перемещение может включать прыжки, лазание и плавание. Эти разные режимы перемещения можно объединять с ходьбой, либо всё перемещение может состоять из них. Как бы вы ни перемещались, вы вычитаете расстояние всех частей перемещения из скорости, пока не закончите перемещаться. Раздел «Особые виды перемещения» в главе 8 приводит подробности по прыжкам, лазанию и плаванию."));

        m1.add(new CustomItem("Основное действие: АТАКА", "Чаще всего в бою совершается действие Атака, будь то удар мечом, стрельба из лука или драка на кулаках. Этим действием вы совершаете одну рукопашную или дальнобойную атаку. Смотрите подробности в разделе «Совершение атаки». Некоторые умения, такие как Дополнительная атака у воина, позволяют совершать несколько атак одним действием. \n"));
        m1.add(new CustomItem("Основное действие: НАКЛАДЫВАНИЕ ЗАКЛИНАНИЯ", "Заклинатели, такие как волшебники и жрецы, а также многие чудовища, имеют доступ к заклинаниям, и могут очень эффективно использовать их в сражении. У каждого заклинания есть время накладывания, измеряющееся в действиях, минутах или даже часах. У большинства заклинаний время накладывания «1 действие», поэтому заклинатели часто тратят действие на сотворение заклинаний. Правила накладывания заклинаний смотрите в главе 10."));
        m1.add(new CustomItem("Основное действие: РЫВОК", "Если вы совершаете действие Рывок, вы получаете дополнительное перемещение в текущем ходу,равное вашей скорости после применения всех модификаторов. Например, если у вас скорость 30футов, то совершив рывок, вы можете переместиться на 60 футов.Все увеличения и уменьшения скорости изменяют точно так же и дополнительное перемещение. Например, если ваша скорость 30 футовуменьшена до 15 футов, то совершив рывок, выможете переместиться на 30 футов."));
        m1.add(new CustomItem("Основное действие: ОТХОД", "Если вы совершаете действие Отход, то до конца текущего хода ваше перемещение не провоцирует атаки."));
        m1.add(new CustomItem("Основное действие: УКЛОНЕНИЕ", "Если вы совершаете действие Уклонение, вы сосредотачиваетесь на уклонении от атак. До начала вашего следующего хода все броски атаки по вам совершаются с помехой, и спасброски Ловкости вы совершаете с преимуществом, если вы видите атакующего. Вы теряете это преимущество, еслистановитесь недееспособным (объясняется в приложении А) или если ваша скорость падает до 0.\n"));
        m1.add(new CustomItem("Основное действие: ПОМОЩЬ", "Вы можете оказать помощь другому существу.Если вы совершаете действие Помощь, существо,которому вы помогаете, совершит свою следующую проверку характеристики для выполнения задачи с преимуществом, если она будет совершенадо начала вашего следующего хода.В качестве альтернативы, вы можете помочьдружественному существу атаковать другое существо, находящееся в пределах 5 футов от вас. Высовершаете финт, отвлекаете цель или какимтодругим образом делаете атаку союзника более эффективной. Если ваш союзник атакует цель доначала вашего следующего хода, первый бросокатаки совершается с преимуществом.\n"));
        m1.add(new CustomItem("Основное действие: ЗАСАДА", "Если вы совершаете действие Засада, вы совершаете проверку Ловкости (Скрытность), пытаясь спрятаться, используя правила из главы 7. В случае успеха вы получаете определённые преимущества, описанные ниже в разделе «Невидимые атакующие и цели». "));
        m1.add(new CustomItem("Основное действие: ПОДГОТОВКА", "Вы можете прыгнуть на врага, когда он будет проходить под вами, или подождать, пока не произойдёт определённое событие. Для этого вы совершаете в свой ход действие Подготовка, чтобы реакцией подействовать позже. Вопервых, определите, какое воспринимаемое событие вызовет вашу реакцию. Затем выберите действие, либо перемещение, которое будет совершено. Примеры: «Если культист наступит на люк, я дёрну рычаг и открою его», «Если передо мной встанет гоблин, я отойду прочь». Когда срабатывает условие, вы можете либо совершить свою реакцию до окончания действия, вызвавшего срабатывание, либо игнорировать срабатывание условия. Подготовленное действие можно совершить только до начала вашего следующего хода. Помните, что вы можете совершить только одну реакцию в раунд. Если вы подготовили заклинание, вы накладываете его как обычно, но удерживаете энергию, пока не сработает условие. Для того чтобы заклинание можно было подготовить, у него должно быть время накладывания «1 действие», а удерживание магии требует концентрации (объясняется в главе 10). Если концентрация прервана, заклинание тратится без всякого эффекта. Например, если вы концентрируетесь на заклинании паутина и подготавливаете волшебную стрелу, заклинание паутина заканчивается, и если вы получите урон до накладывания волшебной стрелы реакцией, ваша концентрация рискует прерваться.\n"));
        m1.add(new CustomItem("Основное действие: ПОИСК", "Совершив действие Поиск, вы уделяете вниманиепоиску чегото. В зависимости от характера вашихпоисков, Мастер может призвать к проверке Мудрости (Внимательность) или Интеллекта (Анализ)."));
        m1.add(new CustomItem("Основное действие: ИСПОЛЬЗОВАНИЕ ПРЕДМЕТА", "Обычно вы взаимодействуете с предметами во время других действий, например, вынимаете меч частью атаки, но если предмет требует действия для его использования, вы совершаете действие Использование предмета. Это действие также пригодится, если вы хотите в течение хода взаимодействовать сразу с несколькими предметами."));

        m1.add(new CustomItem("Реакция", "Некоторые особые умения, заклинания и ситуации позволяют совершать особые действия, называемые реакциями. Реакция — это мгновенный ответ на срабатывание некоего условия, который может происходить как в ваш, так и в чужой ход. Провоцированная атака, которая будет описана ниже, — самый распространённый пример реакции. Если вы совершили реакцию, вы не сможете совершить вторую реакцию до начала своего следующего хода. Если реакция прерывала ход другого существа, это существо может продолжить свой ход после реакции."));
        m1.add(new CustomItem("Бонусное действие", "Разнообразные классовые умения, заклинания и прочие эффекты позволяют вам совершать в ход дополнительное действие, называемое бонусным действием. «Хитрое действие», например, позволяет плуту совершать бонусные действия. Бонусное действие можно совершать только если особое умение или заклинание напрямую разрешает делать чтото бонусным действием. В противном случае бонусное действие совершать нельзя. В свой ход вы можете совершить только одно бонусное действие, так что если у вас есть несколько вариантов, вы должны выбрать, какое бонусное действие совершить. Вы сами выбираете, в какой момент хода совершить бонусное действие, если только его описание не указывает чёткие условия его применения, и все эффекты, запрещающие вам совершать действия, запрещают также совершать бонусные действия."));

        originalData.put("СРАЖЕНИЕ", m1);

        List<CustomItem> m2 = new ArrayList<>();
        m2.add(new CustomItem("Безсознательный", "• Находящееся без сознания существо«недееспособно», не способно перемещаться и говорить, а также не осознаёт своё окружение.\n• Существо роняет всё, что держит, и падаетничком.\n• Существо автоматически проваливаетспасброски Силы и Ловкости."));
        m2.add(new CustomItem("Испуганный", "• Испуганное существо совершает с помехойпроверки характеристик и броски атаки, пока источник его страха находится в пределах его линии обзора.\n• Существо не способно добровольноприблизиться к источнику своего страха"));
        m2.add(new CustomItem("Невидимый", "• Невидимое существо невозможно увидеть безпомощи магии или особого чувства.  Местонахождение существа можно определить по шуму, который оно издаёт, или по оставленным им следам.\n• Броски атаки по невидимому существусовершаются с помехой, а его броски атаки с преимуществом."));
        m2.add(new CustomItem("Недееспособный", "• Недееспособное существо не может совершатьдействия и реакции"));
        m2.add(new CustomItem("Оглохший", "• Оглохшее существо ничего не слышит иавтоматически проваливает все проверкихарактеристик, связанные со слухом"));
        m2.add(new CustomItem("Опутанный", "• Скорость опутанного существа равна 0, и ононе получает выгоды ни от каких бонусов кскорости.\n• Броски атаки по такому существу совершаютсяс преимуществом, а его броски атаки спомехой.\n• Существо совершает с помехой спасброскиЛовкости"));
        m2.add(new CustomItem("Схваченный", "• Скорость схваченного существа равна 0.\n• Состояние оканчивается, если схватившийстановится недееспособен.\n• Это состояние также оканчивается, если какойлибо эффект выводит схваченное существо иззоны досягаемости того, кто его удерживает."));
        m2.add(new CustomItem("Окаманевший", "•Существо превращается в камень.\n• Существо «недееспособно», не способнодвигаться и говорить, а также не осознаёт своё окружение.\n• Броски атаки по существу совершаются спреимуществом.\n• Существо автоматически проваливаетспасброски Силы и Ловкости.\n• Существо получает сопротивление ко всемвидам урона, ядам и болезням"));
        m2.add(new CustomItem("Ослеплённый", "• Ослеплённое существо ничего не видит иавтоматически проваливает все проверкихарактеристик, связанные со зрением.\n• Броски атаки по такому существу совершаются спреимуществом, а его броски атаки совершаются с помехой"));
        m2.add(new CustomItem("Очарованный", "• Очарованное существо не может атаковатьтого, кто его очаровал, а также делать егоцелью умения или магического эффекта,причиняющего вред.\n• Искуситель совершает с преимуществом всепроверки характеристик при социальномвзаимодействии с очарованным существом."));
        m2.add(new CustomItem("Ошеломлённый/парализованный", "•Существо «недееспособно», не способноперемещаться.\n• Существо автоматически проваливаетспасброски Силы и Ловкости.\n• Броски атаки по существу совершаются спреимуществом"));
        m2.add(new CustomItem("Сбитый с ног", "• Сбитое с ног существо способно перемещатьсятолько ползком, пока не встанет, прервав темсамым это состояние.\n• Существо совершает с помехой броски атаки.\n• Броски атаки по существу совершаются спреимуществом, если нападающий находится впределах 5 футов от него. В противном случаеброски атаки совершаются с помехой"));
        m2.add(new CustomItem("Отравленный", "• Отравленное существо совершает с помехойброски атаки и проверки характеристик."));

        originalData.put("СОСТОЯНИЯ", m2);

        List<CustomItem> m3 = new ArrayList<>();
        m3.add(new CustomItem("Дробящий", "Тяжёлые силовые атаки — молотом, падением, сдавливанием и т. п. — причиняют дробящий урон"));
        m3.add(new CustomItem("Звук", "Оглушительные звуковые волны, такие как от заклинания волна грома, причиняют урон звуком"));
        m3.add(new CustomItem("Излучение", "Урон излучением, причиняемый заклинанием небесный огонь жреца и карающим оружием ангела, опаляют плоть как огонь и переполняют дух силой"));
        m3.add(new CustomItem("Кислота", "Едкое дыхание чёрного дракона и растворяющая слизь чёрного пудинга причиняют урон кислотой"));
        m3.add(new CustomItem("Колющий", "Колющие и пронзающие атаки, включая удары копьём и укусы чудовищ, причиняют колющий урон"));
        m3.add(new CustomItem("Некротическая энергия.", "Некротическая энергия, излучаемая некоторой нежитью и такими заклинаниями как леденящее прикосновение, иссушают плоть и даже душу"));
        m3.add(new CustomItem("Огонь", "Красный дракон, выдыхающий пламя, и многие заклинания, создающие жар, причиняют урон огнём"));
        m3.add(new CustomItem("Психическая энергия", "Атаки силой разума, такие как у иллитидов, причиняют урон психической энергией."));
        m3.add(new CustomItem("Рубящий", "Мечи, топоры и когти чудовищ причиняют рубящий урон"));
        m3.add(new CustomItem("Силовое поле", "Силовое поле это чистая магия, сфокусированная в разрушительную силу. Чаще всего силовым полем причиняют урон заклинания, такие как волшебная стрела и божественное оружие"));
        m3.add(new CustomItem("Холод", "Лютый холод от копья ледяного дьявола и морозное дыхание белого дракона причиняют урон холодом"));
        m3.add(new CustomItem("Электричество", "Заклинание молния и дыханиесинего дракона причиняют урон электричеством"));
        m3.add(new CustomItem("Яд", "Ядовитые укусы и токсичное дыхание зелёного дракона причиняют урон ядом"));

        originalData.put("ВИДЫ УРОНА", m3);

        List<CustomItem> m4 = new ArrayList<>();
        m4.add(new CustomItem("Укрытие на 1/2", "Бонус к КД +2"));
        m4.add(new CustomItem("Укрытие на 3/4", "Бонус к КД +5"));
        m4.add(new CustomItem("Полное укрытие ", "При полном укрытии вас нельзя атаковать и накладывать на васзаклинания."));

        originalData.put("УКРЫТИЕ", m4);


        filteredData.putAll(originalData);
        mInflater = LayoutInflater.from(context);

    }


    @Override
    public int getGroupCount() {
        return 4;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        return (new ArrayList<>(filteredData.values())).get(groupPosition).size();
    }

    @Override
    public Object getGroup(int groupPosition) {
        return (new ArrayList<>(filteredData.values())).get(groupPosition);
    }

    @Override
    public Object getChild(int groupPosition, int childPosition) {
        return (new ArrayList<>(filteredData.values())).get(groupPosition).get(childPosition);
    }

    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }

    @Override
    public boolean hasStableIds() {
        return true;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
        if (convertView == null) {
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.spell_list_view_item_layout_level, null);
        }

        if (isExpanded) {
            //Изменяем чтонибудь, если текущая Group раскрыта
        } else {
            //Изменяем чтонибудь, если текущая Group скрыта
        }

        TextView textGroup = convertView.findViewById(R.id.textView2);
        textGroup.setText((new ArrayList<>(filteredData.keySet())).get(groupPosition));
        textGroup.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
        textGroup.setTypeface(null, Typeface.BOLD);
        textGroup.setTextColor(Color.WHITE);

        return convertView;

    }

    @Override
    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
        final View view;

        convertView = mInflater.inflate(R.layout.listview_layout_single_text, parent, false);
        TextView textView = convertView.findViewById(R.id.textView2);


        final CustomItem customItem = (new ArrayList<>(filteredData.values())).get(groupPosition).get(childPosition);

        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
        textView.setTypeface(null, Typeface.BOLD);
        textView.setTextColor(Color.WHITE);
        textView.setText(customItem.getName());

        view = convertView;

        return view;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    }


    public int getCount() {
        return filteredData.keySet().size();
    }


    public Filter getFilter() {
        return mFilter;
    }

    private class ItemFilter extends Filter {
        @RequiresApi(api = Build.VERSION_CODES.N)
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {

            FilterResults results = new FilterResults();
            final LinkedHashMap<String, List<CustomItem>> nlist = new LinkedHashMap<>();

            List<CustomItem> m1 = new ArrayList<>();
            nlist.put("СРАЖЕНИЕ", m1);
            List<CustomItem> m2 = new ArrayList<>();
            nlist.put("СОСТОЯНИЯ", m2);
            List<CustomItem> m3 = new ArrayList<>();
            nlist.put("ВИДЫ УРОНА", m3);
            List<CustomItem> m4 = new ArrayList<>();
            nlist.put("УКРЫТИЕ", m4);

            for (int i = 0; i < 4; i++) {
                for (CustomItem customItem : (new ArrayList<>(originalData.values())).get(i)) {

                    if ("".equals(customItem.getName()) || customItem.getName().toLowerCase().contains(constraint.toString().toLowerCase())) {
                        nlist.get((new ArrayList<>(originalData.keySet())).get(i)).add(customItem);
                    }
                }

            }

            results.values = nlist;
            results.count = nlist.size();

            return results;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            filteredData = (LinkedHashMap<String, List<CustomItem>>) results.values;
            if (filteredData == null) {
                List<CustomItem> m1 = new ArrayList<>();
                filteredData.put("СРАЖЕНИЕ", m1);
                List<CustomItem> m2 = new ArrayList<>();
                filteredData.put("СОСТОЯНИЯ", m2);
                List<CustomItem> m3 = new ArrayList<>();
                filteredData.put("ВИДЫ УРОНА", m3);
                List<CustomItem> m4 = new ArrayList<>();
                filteredData.put("УКРЫТИЕ", m4);
            }
            notifyDataSetChanged();
        }

    }
}

//in your Activity or Fragment where of Adapter is instantiated :
